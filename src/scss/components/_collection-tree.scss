@use "sass:selector";
@use "../abstracts/mixins/breakpoints";
@use "../abstracts/mixins/hairline";
@use "../abstracts/mixins/selectors";
@use "../abstracts/variables";
@use "../themes/common";

//
// Collection tree
// --------------------------------------------------

.collection-tree {
	flex: 1 1 0;

	@include breakpoints.touch-or-bp-down(sm) {
		display: flex;
		flex-direction: column;
		line-height: variables.$line-height-large-touch;
		min-height: 0; // #290 Fix height in short viewports
	}

	@include breakpoints.mouse-and-bp-up(md) {
		padding: 8px;
		overflow: auto;
		line-height: variables.$line-height-large;
		z-index: 1; // Fix #531
	}

	section + section {
		@include breakpoints.touch-or-bp-down(sm) {
			margin-top: variables.$collection-tree-section-spacing;
		}
	}

	h4 {
		color: common.$collection-tree-headings-color;
		margin: 0;
		padding: 0 variables.$collection-tree-padding-x 0 variables.$collection-tree-padding-left;


		@include breakpoints.touch-or-bp-down(sm) {
			padding: variables.$border-width variables.$collection-tree-padding-x-touch 0;
			background: var(--material-toolbar);
			@include hairline.hairline(top, "color-shade-4");
		}

		@include breakpoints.mouse-and-bp-up(md) {
			@include selectors.state(".collection-tree.picker-mode") {
				padding-left: variables.$collection-tree-picker-padding-left;
			}
		}
	}

	.item-container {
		display: flex;
		align-items: center;
		outline-offset: -(variables.$outline-width);
		position: relative;

		@include breakpoints.touch-or-bp-down(sm) {
			padding: variables.$border-width variables.$default-padding-x-touch 0;
			@include hairline.hairline(top, "color-shade-4", $start: (2 * variables.$default-padding-x-touch + 28px));
		}

		@include breakpoints.mouse-and-bp-up(md) {
			height: variables.$line-height-large;
			padding-right: variables.$default-padding-x;
			border-radius: 5px;
		}

		@include selectors.state("li:first-child > .item-container") {
			@include breakpoints.touch-or-bp-down(sm) {
	 			@include hairline.hairline-disabled(top);
	 		}
		}

		@include selectors.state(".level-0:nth-child(3) > ul > li:first-child > .item-container") {
			@include breakpoints.touch-or-bp-down(sm) {
	 			@include hairline.hairline(top, "color-shade-4");
	 		}
		}

		@include selectors.state(".collection-tree:not(.picker-mode) li:last-child > .item-container") {
			@include breakpoints.touch-or-bp-down(sm) {

				&::after {
					content: "";
					position: absolute;
					z-index: -1;
					right: 0;
					bottom: 0;
					left: 2 * variables.$default-padding-x-touch + 28px;
					height: 1px;
					box-shadow: 0 1px var(--color-collection-tree-shadow);

					@media (min-resolution: 2dppx) {
						box-shadow: 0 1px common.$touch-collection-tree-border;
						transform: translateY(-0.5px);
					}
				}
			}
		}

		@include selectors.state("li.selected > .item-container", ".collection-tree:not(.picker-mode) li.open > .item-container") {
			@include breakpoints.touch-or-bp-down(sm) {
				background: var(--accent-blue);
				@include hairline.hairline-disabled(top);
			}
		}

		@include selectors.state("li.selected + li > .item-container", ".collection-tree:not(.picker-mode) li.open + li > .item-container") {
			@include breakpoints.touch-or-bp-down(sm) {
				@include hairline.hairline-disabled(top);
			}
		}

		@include selectors.state("li.selected > .item-container") {
			@include breakpoints.mouse-and-bp-up(md) {
				background: var(--color-quarternary-on-sidepane);
			}
		}

		@include selectors.state(".collection-tree:focus-within li.selected > .item-container") {
			@include breakpoints.mouse-and-bp-up(md) {
				background-color: var(--color-accent);
			}
		}

		@include selectors.state("li.highlighted > .item-container") {
			@include breakpoints.mouse-and-bp-up(md) {

				background: var(--accent-highlight);
			}
		}

		@include selectors.state("li.picked > .item-container") {
			@include breakpoints.mouse-and-bp-up(md) {
				background: var(--color-accent);
			}
		}

		@include selectors.state(".item-container:focus") {
			@include breakpoints.touch-keyboard-or-bp-down(sm) {
				@include hairline.hairline-disabled(top);

				@include selectors.state("li.selected > .item-container", "li.open > .item-container") {
					outline-color: var(--color-sidepane);
				}
			}
		}

		@include selectors.state("li.focus + li > .item-container") {
			@include breakpoints.touch-keyboard-or-bp-down(sm) {
				@include hairline.hairline-disabled(top);
			}
		}

		@include selectors.state(".item-container.dnd-target", "li.selected > .item-container.dnd-target") {
			@include breakpoints.mouse-and-bp-up(md) {
				color: var(--material-background);
				background: var(--fill-secondary);
			}
		}

		.twisty {
			margin-left: -(variables.$collection-tree-padding-left);

			@include breakpoints.touch-or-bp-down(sm) {
				display: none;
			}

			.icon-triangle {
				@include selectors.state(".open > .item-container") {
					transform: scaleY(-1);
				}
			}
		}

		.icon {
			&.icon-folder,
			&.icon-folders {
				color: var(--accent-blue);
			}

			&.icon-library,
			&.icon-library-read-only {
				@include selectors.state("li.library-node.my-library > .item-container") {
					color: var(--accent-blue);
				}

				@include selectors.state("li.library-node:not(.my-library) > .item-container") {
					color: var(--accent-teal);
				}
			}

			&.icon-trash {
				html:not(.specifity) & {
					color: var(--accent-wood);
				}
			}

			&.icon-document {
				@include selectors.state("li.items-node > .item-container") {
					color: var(--accent-blue);
				}

				@include selectors.state("li.publications > .item-container") {
					color: var(--accent-green);
				}
			}

			@include breakpoints.touch-or-bp-down(sm) {
				color: var(--color-accent);

				@include selectors.state("li.selected > .item-container") {
					color: var(--primary-on-accent);
				}
			}

			@include breakpoints.mouse-and-bp-up(md) {
				&:not(.icon-spin) {
					@include selectors.state(".collection-tree:focus-within li.selected > .item-container") {
						color: var(--primary-on-accent);
					}

					@include selectors.state("li.picked > .item-container") {
						color: var(--primary-on-accent);
					}
					@include selectors.state(".item-container.dnd-target", "li.selected > .item-container.dnd-target") {
						color: var(--material-background);
					}
				}
			}
		}

		> .icon {
			flex: 0 0 auto;
			margin-right: variables.$space-xs;

			&.touch {
				margin-right: variables.$space-md;
			}

			&.icon-library-read-only {
				margin-right: variables.$space-xs - 2px;

				&.touch {
					margin-right: variables.$space-md - 2px;
				}
			}

			@include selectors.state("li.disabled > .item-container") {
				@include breakpoints.touch-or-bp-down(sm) {
					color: var(--color-shade-10-50);
				}
			}
		}

		> .truncate {
			flex: 1 1 auto;
			color: var(--color-primary);
			position: relative;

			@include selectors.state("li.selected > .item-container", ".collection-tree:not(.picker-mode) li.open > .item-container") {
				@include breakpoints.touch-or-bp-down(sm) {
					color: var(--primary-on-accent);
				}
			}

			@include selectors.state("li.selected > .item-container") {
				@include breakpoints.mouse-and-bp-up(md) {
					color: var(--color-primary);
				}
			}

			@include selectors.state(".collection-tree:focus-within li.selected > .item-container") {
				@include breakpoints.mouse-and-bp-up(md) {
					color: var(--primary-on-accent);
				}
			}

			@include selectors.state("li.picker-skip > .item-container") {
				@include breakpoints.mouse-and-bp-up(md) {
					color: var(--color-shade-10-50);
				}
			}

			@include selectors.state("li.disabled > .item-container") {
				color: var(--color-shade-10-50);
			}

			@include selectors.state("li.picked > .item-container") {
				@include breakpoints.mouse-and-bp-up(md) {
					color: var(--primary-on-accent);
				}
			}
		}

		.icon-spin {
			margin-right: 0;
			margin-left: variables.$space-xs;
		}

		.btn-icon-plus {
			@include breakpoints.mouse-and-bp-up(md) {
				margin-right: -(variables.$space-min) - variables.$input-border-width;

				@include selectors.state(".item-container:not(:focus-within)", "html:not(.keyboard)") {
					visibility: hidden;
				}

				@include selectors.state(".item-container:hover") {
					visibility: visible;
				}
			}
		}

		.dropdown {
			@include breakpoints.touch-or-bp-down(sm) {
				margin-left: variables.$space-sm;
				margin-right: 0;
			}

			@include breakpoints.mouse-and-bp-up(md) {
				margin-left: variables.$space-xs;
				margin-right: -(variables.$space-min) - variables.$input-border-width;
			}

			.dropdown-toggle {
				display: block;
				border-radius: 0;

				@include breakpoints.touch-or-bp-down(sm) {
					padding: 0; // Simulate btn-link
					border: 0;

					@include selectors.state(".dropdown.show .dropdown-toggle") {
						@include selectors.state("li.selected > .item-container") {
							background-color: var(--color-background);

							.icon {
								color: var(--accent-blue);
							}
						}
					}
				}

				@include breakpoints.touch-keyboard-or-bp-down(sm) {
					&:focus {
						outline-offset: variables.$outline-offset; // Simulate btn-link

						@include selectors.state("li.selected > .item-container .dropdown-toggle", "li.open > .item-container .dropdown-toggle") {
							outline-color: var(--primary-on-accent);
						}
					}
				}

				@include breakpoints.mouse-and-bp-up(md) {
					@include selectors.state(".item-container:not(:focus-within)", "html:not(.keyboard)") {
						visibility: hidden;
					}

					@include selectors.state(".item-container:hover") {
						visibility: visible;
					}

					@include selectors.state(".dropdown.show .dropdown-toggle") {
						visibility: visible;

						.icon {
							color: common.$icon-active-color;
						}
					}
				}

				@include breakpoints.mouse-keyboard-and-bp-up(md) {
					&:focus {
						box-shadow: inset 0 0 0 variables.$input-btn-focus-width var(--accent-blue); // Align with twisty and item-container outline
					}
				}
			}
		}
	}

	@include breakpoints.mouse-and-bp-up(md) {
		@for $i from 1 through variables.$collection-tree-max-levels {
			$sel: if($i == 1, "ul", selector.nest($sel, "ul"));

			#{$sel} {
				.item-container {
					padding-left: variables.$collection-tree-padding-left + variables.$collection-tree-indent * ($i - 1);

					@include selectors.state(".collection-tree.picker-mode") {
						padding-left: variables.$collection-tree-picker-padding-left + variables.$collection-tree-indent * ($i - 1);
					}
				}
			}
		}
	}

	.level-root {
		@include breakpoints.touch-or-bp-down(sm) {
			flex: 1 1 100%;
			height: 100%;
			transform: translate3d(-25%, 0, 0);
			transition: transform variables.$nav-transition;

			&.active {
				transform: translate3d(0, 0, 0);
			}

			// Always translate root level on phones
			.view-item-list-active & {
				@include breakpoints.bp-down(xs) {
					transform: translate3d(-25%, 0, 0);
				}
			}

			.scroll-container-touch {
				overflow: hidden; // Prevent scrolling of inactive levels
				height: 100%;

				@include selectors.state(".level-root.active") {
					overflow: scroll;
				}
			}
		}
	}

	.level {
		z-index: variables.$z-index-level;
		transition: transform variables.$nav-transition;

		&.loading {
			display: flex;
			justify-content: center;
			align-items: center;
			height: 100%;
			padding: 0;
		}

		.level {
			@include breakpoints.touch-or-bp-down(sm) {
				position: absolute;
				left: 0;
				top: 0;
				width: 100%;
				height: 100%;
				background: var(--material-sidepane);
				transform: translate3d(100%, 0, 0);

				.nav {
					height: 100%;
					-webkit-overflow-scrolling: touch;
					overflow: scroll; // Do not set on positioned elements (horizontal overflow)
				}
			}

			@include breakpoints.mouse-and-bp-up(md) {
				display: none;
			}
		}

		.level-2 {
			@include breakpoints.touch-or-bp-down(sm) {
				transform: translate3d(125%, 0, 0);
			}
		}
	}

	.open,
	.selected {
		> .level {
			@include breakpoints.touch-or-bp-down(sm) {
				transform: translate3d(25%, 0, 0);
				z-index: variables.$z-index-level-active;

				&.has-open {
					transform: translate3d(0, 0, 0);

					> .nav {
						overflow: hidden; // Prevent scrolling of inactive levels
					}
				}
			}
		}

		// Do not translate last level on tablets and in touch mode
		.level-last {
			&.has-open {
				@include breakpoints.touch-or-bp-only(sm) {
					transform: translate3d(25%, 0, 0);
				}
			}
		}
	}

	.open {
		@include breakpoints.mouse-and-bp-up(md) {
			> .level {
				display: block;
			}
		}
	}
}

.picker-mode {
	.icon-spin {
		@include breakpoints.mouse-and-bp-up(md) {
			margin-right: variables.$space-sm;
		}
	}

	input[type=checkbox] {
		margin-right: variables.$space-sm;
	}

	.picker-checkbox-placeholder {
		width: variables.$space-lg + variables.$space-sm; // width of checkbox + margin
	}
}
