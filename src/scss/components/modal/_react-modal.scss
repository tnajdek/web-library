@use "../../abstracts/mixins/breakpoints";
@use "../../abstracts/mixins/hairline";
@use "../../abstracts/mixins/selectors";
@use "../../abstracts/variables";
@use "../../themes/common";

//
// React-modal
//

.ReactModal__Body--open {
	overflow: hidden;
}

.modal-backdrop {
	position: fixed;
	top: 0;
	right: 0;
	bottom: 0;
	left: 0;
	background-color: var(--color-backdrop);
	overflow-y: auto;
	-webkit-overflow-scrolling: touch; // Momentum scrolling for iOS 10–
	z-index: variables.$z-index-modal;

	@include breakpoints.bp-down(xs) {
		overflow-y: hidden;
	}

	&.loading {
		display: flex;
		justify-content: center;
		align-items: center;

		.modal {
			border: none;
			display: flex;
			align-items: center;
			justify-content: center;
		}

		.icon-spin {
			color: var(--color-backdrop-spinner);
		}
	}
}

.modal {
	border: var(--material-border-quarternary);

	@include breakpoints.bp-down(xs) {
		border: none;
	}

	@include breakpoints.bp-up(sm) {
		width: variables.$modal-md;
		margin: variables.$space-xl auto;
	}

	&-lg {
		@include breakpoints.bp-up(sm) {
			width: variables.$modal-lg;
			width: calc(100% - 2 * #{variables.$space-xl});
		}
	}

	&-xl {
		@include breakpoints.bp-up(sm) {
			width: variables.$modal-xl;
			width: calc(100% - 2 * #{variables.$space-xl});
		}
	}

	.fade-overlay {
		position: absolute;
		left: 0;
		top: 0;
		right: 0;
		bottom: 0;
		background-color: rgba(0, 0, 0, .5);
		z-index: variables.$z-index-modal + 1;
	}
}

.modal-content {
	display: flex;
	flex-direction: column;

	@include breakpoints.bp-down(xs) {
		height: 100%;
		width: 100%;
	}

	@include breakpoints.bp-up(sm) {
		border-radius: variables.$modal-border-radius;
		overflow: hidden;
	}

		.modal-scrollable & {
		@include breakpoints.bp-up(sm) {
			display: flex;
			flex-direction: column;
			max-height: calc(100% - 2 * #{variables.$space-xl});
		}
	}
}

@each $element in header, footer {
	.modal-#{$element} {
		flex: 0 0 auto;
		display: flex;
		align-items: center;
		padding-left: variables.$modal-inner-padding;
		padding-right: variables.$modal-inner-padding;

		&-left,
		&-right {
			flex: 1 0 0;
		}

		&-center {
			flex: 2 0 0;
			max-width: 50%;
			text-align: center;
		}

		&-right {
			text-align: right;
		}

		@include breakpoints.touch-or-bp-down(sm) {
			height: variables.$modal-header-height + variables.$border-width;
			background-color: common.$modal-touch-header-bg;
		}

		@include breakpoints.mouse-and-bp-up(md) {
			padding-top: variables.$modal-inner-padding;
			padding-bottom: variables.$modal-inner-padding;
			background-color: common.$modal-content-bg;
		}

		.modal-form & {
			@include breakpoints.touch-or-bp-down(sm) {
				background-color: common.$modal-form-header-bg;
			}
		}
	}
}

.modal-header {
	padding-bottom: variables.$border-width;

	@include breakpoints.touch-or-bp-down(sm) {
		@include hairline.hairline(bottom, "color-shade-4");
	}

	@include breakpoints.mouse-and-bp-up(md) {
		justify-content: space-between;
		border-bottom: variables.$border-width solid common.$modal-border-color;
	}

	.close {
		@include breakpoints.mouse-and-bp-up(md) {
			padding: variables.$space-min + variables.$input-border-width + variables.$modal-inner-padding * 0.5;
			margin: -(variables.$modal-inner-padding) * 0.5;
			margin-right: -(variables.$modal-inner-padding) * 0.5 + 2px; // Even spacing
		}
	}
}

.modal-title {
	@include breakpoints.mouse-and-bp-up(md) {
		font-size: variables.$modal-title-font-size;
	}
}

.modal-body {
	padding: variables.$modal-inner-padding;
	background-color: common.$modal-content-bg; // Set content-bg on header, body, and footer explicitly for better border-radius rendering (focus border)
	flex: 1;

	@include breakpoints.bp-down(xs) {
		height: calc(100% - #{variables.$modal-header-height});
		overflow-y: auto;
		-webkit-overflow-scrolling: touch; // Momentum scrolling for iOS
	}

	.modal-scrollable & {
		overflow-y: auto;
		overflow-x: clip;
		-webkit-overflow-scrolling: touch; // Momentum scrolling for iOS 10–

		&:focus {
			.keyboard & {
				outline: none;
				border: variables.$outline-width solid common.$focus-color;
			}
		}
	}

	.modal-form & {
		@include breakpoints.touch-or-bp-down(sm) {
			background-color: common.$form-bg-touch;
		}
	}
}

.modal-footer {
	padding-top: variables.$border-width;

	@include breakpoints.touch-or-bp-down(sm) {
		@include hairline.hairline(top, "color-shade-4");
	}

	@include breakpoints.mouse-and-bp-up(md) {
		border-top: variables.$border-width solid common.$modal-border-color;
	}

	> .btn {
		&:not(:first-child) {
			margin-left: variables.$space-sm * 0.5;
		}

		&:not(:last-child) {
			margin-right: variables.$space-sm * 0.5;
		}
	}
}

.modal-centered {
	display: flex;
	align-items: center;
}

.modal-full-height .modal-content {
	min-height: 100%;

	@include breakpoints.bp-up(sm) {
		min-height: unset;
		height: calc(100% - #{2 * variables.$space-xl});
	}
}

.modal-contains-picker {
	.modal-header {
		@include breakpoints.touch-or-bp-down(sm) {
			padding-left: 0;
			padding-right: 0;
		}

		.touch-header {
			width: 100%;
		}
	}

	.modal-body {
		padding: 0;

		// On touch devices, the picker inside the modal uses the small-screen behavior at all screen sizes
		@include breakpoints.touch-or-bp-down(sm) {
			.sidebar {
				bottom: 44px;
				height: calc(100% - 88px);
				left: 0;
				overflow: visible;
				position: absolute;
				right: 0;
				top: 44px;
			}

			.items {
				height: calc(100% - 88px);
				background-color: var(--color-shade-0);
				bottom: 44px;
				left: 0;
				position: absolute;
				right: 0;
				top: 44px;
				transform: translate3d(100%, 0, 0);
				transition: transform variables.$nav-transition;
			}

			&.view-item-list-active .items {
				transform: translate3d(0, 0, 0);
			}
		}
	}
}

.modal-slide {
	&.ReactModal {
		// Transitioning opacity yields a smoother animation but triggers a Safari glitch (see
		// #628). To work around this, we transition background-color when the modal opens and
		// opacity when it closes (Safari doesn't glitch on close).
		&__Overlay {
			@include breakpoints.touch-or-bp-down(sm) {
				background-color: rgba(0, 0, 0, 0);
			}

			.modal-content {
				@include breakpoints.touch-or-bp-down(sm) {
					transform: translate3d(0, 100%, 0);
				}
			}

			&--after-open {
				@include breakpoints.touch-or-bp-down(sm) {
					background-color: var(--color-backdrop);
					transition: background-color variables.$nav-transition;
				}

				.modal-content {
					@include breakpoints.touch-or-bp-down(sm) {
						transform: translate3d(0, 0, 0);
						transition: transform variables.$nav-transition;
					}
				}
			}

			&--before-close {
				@include breakpoints.touch-or-bp-down(sm) {
					opacity: 0;
					transition: opacity variables.$modal-exit-transition-xs;
				}

				.modal-content {
					@include breakpoints.touch-or-bp-down(sm) {
						transform: translate3d(0, 100%, 0);
						transition: transform variables.$modal-exit-transition-xs;
					}
				}
			}
		}
	}
}
