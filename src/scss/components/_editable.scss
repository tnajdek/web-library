@use "../abstracts/mixins/breakpoints";
@use "../abstracts/mixins/selectors";
@use "../abstracts/mixins/utilities";
@use "../abstracts/variables";
@use "../themes/common";

//
// Editable
// --------------------------------------------------

.editable {
	flex: 1 1 auto;
	min-width: 0; // Fix truncation

	@include breakpoints.mouse-and-bp-up(md) {
		line-height: normal;
	}

	.editable-content {
		white-space: pre-wrap;
		padding: variables.$editable-padding;
		border: variables.$input-border-width solid transparent;
		width: calc(100% + #{2 * variables.$editable-border-width});
		margin: -(variables.$editable-border-width);
		border-radius: variables.$editable-border-radius;

		@include selectors.state(".editable:hover:not(.disabled)") {
			cursor: pointer;

			@include breakpoints.mouse-and-bp-up(md) {
				background-color: common.$editable-hover-bg; // Use transparency so you can see through the comma between last and first name
			}
		}

		&.placeholder {
			color: common.$placeholder-color;
		}

		@include selectors.state(".empty .editable") {
			&:before {
				content: "\00a0";
			}
		}
	}

	.editable-control {
		flex: 1 1 auto;
		font: inherit;
		line-height: normal;
		text-align: inherit;
		margin: -(variables.$editable-border-width + variables.$editable-padding);
		width: calc(
			100% + #{2 * (variables.$editable-border-width + variables.$editable-padding)}
		);
		padding: variables.$editable-padding;
		border: variables.$editable-border-width solid common.$editable-border-color;
		color: common.$editable-color;
		background: common.$editable-bg;
		border-radius: variables.$editable-border-radius;

		&:focus {
			outline: none;
		}

		@include selectors.state(".busy .editable-control") {
			margin: -(variables.$editable-border-width);
			width: calc(
				100% + #{2 * (variables.$input-border-width + variables.$editable-padding)}
			);
			border: variables.$input-border-width solid transparent;
			background-color: transparent;

			@include selectors.state(".editable:hover") {
				@include breakpoints.mouse-and-bp-up(md) {
					background-color: common.$editable-hover-bg;
					z-index: 1; // render one layer up to cover spinner in textarea #423
				}
			}
		}

		@include selectors.state(".busy:not(.textarea) .editable-control") {
			padding-right: variables.$icon-spin-size-sm + variables.$editable-padding + 1px;
		}
	}

	&:not(.textarea) {
		.editable-content {
			@include utilities.text-truncate;
		}

		.busy {
			.editable-control {
				@include utilities.text-truncate;
			}
		}
	}

	.icon-spin {
		@include breakpoints.mouse-and-bp-up(md) {
			top: 0;
			right: 0;
		}
	}

	// Textarea
	&.textarea {
		.editable-content {
			word-wrap: break-word;
		}

		// Correct shade for 'backdrop'
		.input-group {
			&.busy {
				&::after {
					@include breakpoints.mouse-and-bp-up(md) {
						background-color: common.$editable-backdrop-bg;

						@include selectors.state(".editable:hover") {
							background-color: common.$editable-backdrop-hover-bg;
						}
					}
				}
			}
		}

		// Same height for textarea editable-content hover state like other editables
		// No padding for visual 2px padding between border and text selection in editable-control
		.editable-content,
		.editable-control {
			line-height: variables.$line-height-base;
			padding-top: 0;
			padding-bottom: 0;
		}

		// Compensate border
		.editable-content {
			margin-top: -1px;
			margin-bottom: -1px;
		}

		// Compensate border
		.editable-control {
			margin-top: -(variables.$editable-border-width);
			margin-bottom: -(variables.$editable-border-width);

			@include selectors.state(".input-group:not(.busy) .editable-control") {
				height: calc(100% + #{2 * variables.$editable-border-width}); // Fix height in Firefox (#143)
			}

			@include selectors.state(".busy .editable-control") {
				border: variables.$input-border-width solid transparent;
				margin-top: -1px;
				margin-bottom: -1px;
			}
		}
	}

	// Suggestions
	.dropdown-menu {
		width: calc(100% + 2 * #{variables.$editable-padding});
		margin: 3px 0;
		margin-left: variables.$editable-border-width;
	}

}

.pseudo-editable {
	@include breakpoints.touch-or-bp-down(sm) {
		flex: 1 1 auto;
		border: none;
		padding: 0;
		background-color: transparent;
	}

	@include breakpoints.mouse-and-bp-up(md) {
		line-height: normal;

		.select-control {
			padding: variables.$editable-padding;
			border: variables.$input-border-width solid transparent;
			width: calc(100% + #{2 * variables.$editable-border-width});
			margin: -(variables.$editable-border-width);
			background-color: transparent;
			transition: none;

			// Do not increase specificity with :not(.is-disabled)
			@include selectors.state(".pseudo-editable:hover") {
				cursor: pointer;
				background-color: common.$editable-hover-bg;
				border-color: transparent;
			}

			@include selectors.state(".pseudo-editable.is-disabled") {
				cursor: unset;
				background-color: transparent;
				border: variables.$input-border-width solid transparent;
			}
		}

		.select-value {
			padding: 0 variables.$editable-padding;
		}

		&.select-component.single {
			&.has-value {
				.select-value {
					padding-right: variables.$space-md;

					@include selectors.state(".busy .pseudo-editable") {
						padding-right: variables.$icon-spin-size-sm + variables.$editable-padding + 1px;
					}
				}
			}
		}

		.select-arrow {
			display: none;
		}

		&.is-focused {
			.select-control {
				border-color: common.$input-focus-color;
				background-color: common.$input-bg;
				border-radius: 1px;
			}

			.select-arrow {
				display: block;

				@include selectors.state(".busy .pseudo-editable") {
					display: none;
				}
			}
		}

		.select-menu-outer {
			left: -(variables.$editable-padding);
			top: calc(100% + #{variables.$space-min + variables.$input-border-width + variables.$editable-padding + variables.$input-border-width});
			right: -(variables.$editable-padding);
		}
	}

	& + .icon-spin {
		right: 0;
	}
}
